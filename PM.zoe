MODULE pm
--
-- PATERN MATCHING TEST
--
WHERE

-- Tuple declaration
tup@((t1,t2),tt@(t3,t4)) = ((1,2),(3,4));

-- Tuple as argument
getsecondfirst (_,(t1,_)) = t1;
func x = x;

	{- test run getsecondfrist tup -}

-- Element listed list
gete1 [e1,e2,e3] = e1;
[e1,e2,e3] = [1,2,3];

	{- test run getElement [1,2,3] -}
	
-- Head-tail list
gethead l@(h:t) = h;
gettail l@(h:t) = t;
getlist l@(h:t) = l;

TYPE bintree = branch @ INT @ | nil;

mytree = branch (branch nil 1 nil) 2 (branch nil 3 nil);

printt t = FOLD t :: bintree {
	branch = (\s1 n s2 -> s1 ++ (SHOW n) ++ s2);
	nil = ""
};

zhead ls = ls (\x xs -> x) [];
h = zhead [1,2,3];